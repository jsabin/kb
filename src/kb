#!/usr/bin/python
# PYTHON_ARGCOMPLETE_OK

# Requires TextTable    see https://github.com/bufordtaylor/python-texttable
# Required argcomplete  see https://argcomplete.readthedocs.org/en/latest/
# Requires labProxy     in /etc/hosts add entry for labProxy to machine in lab

# version 1.0.2

import argparse
import argcomplete
import requests
import os
import json
import sys
import subprocess
import getpass
from texttable import Texttable

SCREEN_WIDTH = 90
ENVIRONMENT_FILE = ".environment"
VARIABLES_FILE = ".variables"
DOMAIN_FILE = ".domain"
SSH_HOSTS = ".sshHosts"
VARIABLE_DELIMITER = "@"
VARIABLE_COMMON = 'common'

LAB = "https://prism.proofpoint.com"
PRODUCTION = "https://web.proofpoint.com"


def get_host():
    domain = get_domain()
    if domain and domain != 'lab':
        return PRODUCTION
    return LAB


def read_from_file(filename):
    with open(get_temp_path(filename), 'r') as f:
        return f.readline()


def read_all_lines_from_file(filename):
    with open(get_temp_path(filename), 'r') as f:
        return f.readlines()


def read_variables():
    with open(get_full_path(VARIABLES_FILE)) as f:
        return json.load(f)


def exists(filename):
    return os.path.exists(get_temp_path(filename))


def remove(filename):
    os.remove(get_temp_path(filename))


# def read_environment_data():
#     with open('.%s' % get_environment()) as f:
#         return json.load(f)

#
# Write the value to the file overwriting the contents of the file
#
def write_to_file(filename, value):
    with open(get_temp_path(filename), 'w') as f:
        return f.write(str(value))


def append_to_file(filename, value):
    with open(get_temp_path(filename), 'a') as f:
        return f.write(str(value))


def get_full_path(filename):
    return os.path.dirname(os.path.realpath(__file__)) + "/" + filename


def get_temp_path(filename):
    tmp_dir = "/tmp/kb"
    if not os.path.exists(tmp_dir):
        os.makedirs(tmp_dir)
    return tmp_dir + "/" + filename


def get_terminal_id():
    if 'WINDOWID' in os.environ:
        # Gnome window
        return os.environ['WINDOWID']
    elif 'TERM_SESSION_ID' in os.environ:
        return os.environ['TERM_SESSION_ID']
    else:
        return 0


def get_environment_filename():
    return "%s.%s" % (ENVIRONMENT_FILE, get_terminal_id())


def get_environment():
    if exists(get_environment_filename()):
        return read_from_file(get_environment_filename())  # todo strip out whitespace
    else:
        return None


# def set_environment(environment):
#     write_to_file((get_environment_filename()), environment)
#     filename = '.%s.%s' % (get_domain(), environment)
#
#     if get_domain() == 'production' and exists(filename):
#         return
#     write_to_file(filename, get_instances_for_environment(environment))

def set_environment(environment):
    resource = "%s/cmdb_api/v1/service_instance?type=environment&name=%s" % (get_host(), environment)
    environments = requests.get(resource, auth=('readonly', 'readonly')).json()
    if len(environments) < 1:
        print "An environment named %s does not exist" % environment
    else:
        write_to_file((get_environment_filename()), environment)


def set_domain(domain):
    if domain != 'lab' and domain != 'production':
        print "Invalid domain. Must be lab or production"
    else:
        write_to_file(DOMAIN_FILE, domain)


def get_domain():
    if exists(DOMAIN_FILE):
        return read_from_file(DOMAIN_FILE)  # todo strip out whitespace
    else:
        return 'lab'


def in_filter(instance_filter, string):
    if instance_filter:
        if string:
            return instance_filter in string
    return False


def print_instances(instance_filter):
    if get_domain() == 'production' and not args['query']:
        print "The production domain contains almost all instances in a single environment. You must use the query switch to filter instances."
        return

    # todo track how wide columns max is and create table size and column widths accordingly -- set_cols_width(self, array)
    table = Texttable(SCREEN_WIDTH)
    table.set_deco(Texttable.HEADER)
    table.set_cols_dtype(['a', 't', 't', 't', 't', 't', 't'])
    table.set_cols_align(["l", "l", "l", "l", "l", "l", "l"])
    table.set_cols_width([3, 25, 15, 43, 30, 14, 25])

    machines = [["", "Name", "IP", "Roles", "Service Record", "Cloud", "JSON Tags"]]
    count = 1

    if args['query']:
        data = get_environment_data_query(get_environment(), instance_filter)
    else:
        data = filter_environment(instance_filter)

    for machine in data:
        machines.append([count, machine['fqdn'], machine['ip_address'], machine['roles'], machine['svc_id'], machine['cloud'], machine['tags']])
        count += 1

    table.add_rows(machines)
    print(table.draw())

    print "\nTotal %d\n" % (count - 1)


def get_environment_data(environment):
    resource = "%s/cmdb_api/v1/system/?status!=decommissioned&environment_name=%s" % (get_host(), environment)
    json_response = requests.get(resource, auth=('readonly', 'readonly')).text
    return json.loads(json_response)

def get_environment_data_query(environment, query):
    resource = "%s/cmdb_api/v1/system/?status!=decommissioned&environment_name=%s&%s" % (get_host(), environment, query)
    json_response = requests.get(resource, auth=('readonly', 'readonly')).text
    return json.loads(json_response)


def filter_environment(instance_filter):
    data = get_environment_data(get_environment())

    filtered_data = []
    for machine in data:
        if instance_filter and (
                                not in_filter(instance_filter, machine['fqdn']) and
                                not in_filter(instance_filter, machine['ip_address']) and
                            not in_filter(instance_filter, machine['roles']) and
                        not in_filter(instance_filter, machine['cloud']) and
                        not in_filter(instance_filter, machine['svc_id']) and
                    not in_filter(instance_filter, machine['tags'])):  # todo find more elegant way
            continue
        filtered_data.append(machine)
    return filtered_data


def print_services():
    services = list(list_services('', ''))
    if len(services) > 0:
        print "\nEnvironment: %s\n" % get_environment()
        for service in services:
            print service
        print "\n"
    else:
        print "No services found for domain: %s and environment: %s" % (get_domain(), get_environment())


def get_service_properties(environment, service):
    resource = "%s/cmdb_api/v1/environments/%s/services/%s" % (get_host(), environment, service)
    return requests.get(resource, auth=('readonly', 'readonly'))


def print_properties(service, use_json):
    result = get_service_properties(get_environment(), service).content

    if use_json:
        print result
    else:
        data = json.loads(result)
        table = Texttable(200)
        table.set_deco(Texttable.HEADER)
        table.set_cols_dtype(['t', 't'])
        table.set_cols_align(["l", "l", ])

        print "\nEnvironment: %s\n" % get_environment()
        properties = [["Name", "Value"]]
        count = 1
        for key, value in data.iteritems():
            if key == 'svc_id' or key == 'name' or key == 'environment_name' or key == 'type':
                # Ignore metadata
                continue

            properties.append([key, value])
            count += 1

        table.add_rows(properties)
        print(table.draw())
        print "\nTotal %d\n" % (count - 1)


def replace_variables(commands, roles):
    i = 0
    for c in commands:
        if c.startswith(VARIABLE_DELIMITER):
            if roles and roles.split(',')[0] in variables and c in variables[roles.split(',')[0]]:
                commands[i] = variables[roles.split(',')[0]][c]
            elif c in variables[VARIABLE_COMMON]:
                commands[i] = variables[VARIABLE_COMMON][c]
        i += 1


def ssh(arguments):
    instance_filter = arguments['filter']
    machines = filter_environment(instance_filter)
    commands = arguments['command']

    replace_variables(commands, machines[0]['roles'])
    cmd = ' '.join(commands)

    if arguments['index'] == 'all':
        if exists(SSH_HOSTS):
            remove(SSH_HOSTS)
        for machine in machines:
            append_to_file(SSH_HOSTS, machine['ip_address'] + "\n")

        command_string = [
            'pssh -i -x "-o ProxyCommand=\\"ssh -A -W %h:%p labproxy\\"" -h ' + get_temp_path(SSH_HOSTS) + ' ' + cmd]  # Note: this does not work when split into an argument array - not sure why

    else:
        index = int(arguments['index']) - 1
        ip = str(machines[index]['ip_address'])

        if machines[index]['cloud'] == 'awslabcloud':
            # AWS so need to go through a proxy
            command_string = ['ssh -t -o ProxyCommand="ssh -A -W %h:%p labproxy" ' + ip + ' ' + cmd]  # Note: this does not work when split into an argument array - not sure why
        else:
            command_string = ['ssh -t ' + ip + ' ' + cmd]

    # print command
    subprocess.call(command_string, shell=True)


def set_properties(args, username, pwd):
    resource = '%s/cmdb_api/v1/environments/%s/services/%s?_tag_environment=1' % (get_host(), get_environment(), args['service'])
    headers = {'Accept': 'application/json', 'Content-Type': 'application/json'}

    if args['file'] is not None:
        response = requests.put(resource, auth=(username, pwd), headers=headers, data=open(args['file'], 'rb'))
    else:
        props = {}
        for property in args['properties']:
            prop = property.split("=")
            props[prop[0]] = prop[1]
        response = requests.put(resource, auth=(username, pwd), headers=headers, data=json.dumps(props))

    if response.status_code == 201:
        print 'Service record did not exist and was created and the properties were added to it.'  # TODO don't think it actually creates it
    if response.status_code != requests.codes.ok:
        print 'Failed to write properties. Error code %s' % response.status_code


def copy_service(args):
    source_service = args['sourceService']
    source_environment = get_environment()

    destination_service = args['destinationService']
    destination_environment = get_environment()
    if 'environment' in args and args['environment']:
        destination_environment = args['environment']

    password = getpass.getpass()
    username = getpass.getuser()

    response = get_service_properties(destination_environment, destination_service)
    if response.status_code == 404:
        if 'create' in args and args['create']:
            # Create new service record
            resource = '%s/cmdb_api/v1/service_instance' % (get_host())
            headers = {'Accept': 'application/json', 'Content-Type': 'application/json'}
            properties = {'environment_name': get_environment(), 'name': destination_service, 'type': "service", 'note': ""}
            create_response = requests.post(resource, auth=(username, password), headers=headers, data=json.dumps(properties))
            if create_response.status_code != 201:
                print "Could not create destination service %s. Error code %s" % (destination_service, create_response.status_code)
                return
        else:
            print 'Destination service %s does not exist in environment %s.' % (destination_service, destination_environment)
            return
    else:
        json_response = json.loads(response.content)
        if not json_response['environment_name'] == destination_environment:
            print 'Destination service %s does not exist in environment %s. It does exist in the parent environment %s.' % (destination_service, destination_environment, json_response['environment_name'])
            return

    response = get_service_properties(source_environment, source_service)
    if response.status_code == 404:
        print 'Source service %s does not exist in environment %s.' % (source_service, source_environment)
        return

    properties = json.loads(response.content)

    #remove 4 properties we don't want copy over
    del properties['svc_id']
    del properties['name']
    del properties['environment_name']
    del properties['type']

    # Write properties
    resource = '%s/cmdb_api/v1/environments/%s/services/%s?_tag_environment=1' % (get_host(), destination_environment, destination_service)
    headers = {'Accept': 'application/json', 'Content-Type': 'application/json'}
    response = requests.put(resource, auth=(username, password), headers=headers, data=json.dumps(properties))

    if response.status_code != requests.codes.ok:
        print 'Failed to write properties. Error code %s' % response.status_code


# todo check for error response from "requests"
def get_instances_for_environment(environment):
    resource = "%s/cmdb_api/v1/system/?status!=decommissioned&environment_name=%s" % (get_host(), environment)
    return requests.get(resource, auth=('readonly', 'readonly')).text

def get_query_options():
    # https://prism.proofpoint.com/cmdb_api/v1/system?lexicon=1
    resource = "%s/cmdb_api/v1/system?lexicon=1" % get_host()
    return json.loads(requests.get(resource, auth=('readonly', 'readonly')).text)


def list_filters(prefix, parsed_args, **kwargs):
    if 'query' in parsed_args and parsed_args.query:
        return get_query_options()
    else:
        filters = set()
        data = get_environment_data(get_environment())
        for machine in data:
            if machine['fqdn']:
                filters.add(machine['fqdn'])
            if machine['ip_address']:
                filters.add(machine['ip_address'])
            if machine['roles']:
                filters = filters.union(machine['roles'].split(','))
            if machine['tags']:
                filters = filters.union(machine['tags'].split())
            if machine['cloud']:
                filters = filters.union(machine['cloud'].split())
        return filters


# def list_instances(prefix, parsed_args, **kwargs):
#     resource = "https://prism.proofpoint.com/cmdb_api/v1/ystem/?status!=decommissioned&environment_name~%s"
#     return ['jsabin', 'jsabin27', 'dev_integration']


def list_environments(prefix, parsed_args, **kwargs):
    resource = "%s/cmdb_api/v1/service_instance?type=environment" % get_host()
    return (environment['name'] for environment in requests.get(resource, auth=('readonly', 'readonly')).json())


def list_services(prefix, parsed_args, **kwargs):
    resource = "%s/cmdb_api/v1/environments/%s/services" % (get_host(), get_environment())
    response = requests.get(resource, auth=('readonly', 'readonly'))
    if response.status_code != requests.codes.ok:
        return []
    else:
        return (service['name'] for service in response.json() if service['environment_name'] == get_environment())


def list_domains(prefix, parsed_args, **kwargs):
    return ['lab', 'production']


def list_variables(prefix, parsed_args, **kwargs):
    if prefix.startswith(VARIABLE_DELIMITER):
        var_list = variables[VARIABLE_COMMON].keys()
        machines = filter_environment(parsed_args.filter)
        index = int(parsed_args.index) - 1  # todo what if index is "all"

        roles = machines[index]['roles']
        if roles:
            role = roles.split(',')[0]  # todo show for all roles??
            if role in variables:
                var_list.extend(variables[role].keys())
        return var_list
    else:
        return []


def setup_parsers():
    global parser, subparsers, environment_parser, instances_parser, properties_parser, services_parser, setdomain_parser, setenvironment_parser, ssh_parser
    parser = argparse.ArgumentParser()
    subparsers = parser.add_subparsers()

    # kb environment
    environment_parser = subparsers.add_parser("environment", help="Lists the currently set environment")

    # kb -q --query instances [filter]
    instances_parser = subparsers.add_parser("instances", help="Lists instances for the environment")
    instances_parser.add_argument("filter", nargs='*', help="Filters the list of instances if the word or phrase is contained in any of the columns shown").completer = list_filters
    instances_parser.add_argument("-q", "--query", help='Tells the instances command to interpret the filter text as a query. A query looks like this "roles~d4::event-indexer&svc_id~d4::event-indexer". Operations can be ~, !~, =, >, <, and !=. Note that you must escape the "&" for multiple search terms.', action='store_true')

    # kb properties <service> --json
    properties_parser = subparsers.add_parser("properties", help="Lists properties for the specified service")
    properties_parser.add_argument("service", help="Service to list properties for").completer = list_services
    properties_parser.add_argument("--json", help="Returns the properties as JSON", action='store_true')

    # kb -i services   # -i is to include inherited services
    services_parser = subparsers.add_parser("services", help="Lists services for the environment")

    # kb setenvironment <environment>
    setenvironment_parser = subparsers.add_parser("setenvironment", help="Change the environment")
    setenvironment_parser.add_argument("environment", help="Environment to change to").completer = list_environments

    # kb setdomain <lab | production>
    setdomain_parser = subparsers.add_parser("setdomain", help="Change the domain. The domain is either lab or production. Defaults to lab")
    setdomain_parser.add_argument("domain", help="Domain to change to. Can be either lab or production").completer = list_domains

    # kb ssh <filter | index> <index | "all"> [command]
    ssh_parser = subparsers.add_parser("ssh", help="Ssh to the machine specified by filter and index")
    ssh_parser.add_argument("filter", help="Narrows down the list of instances").completer = list_filters
    ssh_parser.add_argument("index", help="Index of the instance").completer = list_filters
    ssh_parser.add_argument("command", help="Ssh command to execute on the instance(s). If empty you are connected to the host", nargs='*').completer = list_variables
    # ssh_subparsers = ssh_parser.add_subparsers()
    # ssh_command_parser = ssh_subparsers.add_parser("comminstaand")
    # ssh_command_parser.add_argument("command", nargs='*').completer = list_variables

    # ssh_parser.add_argument("index|all|command").completer = list_filters
    # ssh_group = ssh_parser.add_mutually_exclusive_group(required=True)
    # ssh_group.add_argument("--f") // filter
    # ssh_group.add_argument("-i") // index

    # kb setproperties -f file <property>=<value> <property>=<value>...
    setproperties_parser = subparsers.add_parser("setproperties", help="Set properties for the given service")
    setproperties_parser.add_argument("service", help="Service to change properties for")
    setproperties_parser.add_argument("-f", "--file",
                                      help="Property file in JSON format that contains properties to set. The format is name/value pairs. See the results of the properites command with the json switch")
    setproperties_parser.add_argument("properties", nargs='*',
                                      help='One or more properties to set in the service. Properties are specified as "<property>=<value> <property>=<value> ..." with no space between'
                                           ' the property name and the value.')

    # kb copyservice <sourceService> [destinationEnvironment:]<destinationService>
    copyservice_parser = subparsers.add_parser("copyservice", help="Copies a service. If the service does not exist an error is returned. Use -c or --create to create the service if it doesn't exist.")
    copyservice_parser.add_argument("sourceService", help="Service to copy. Must exist in the current environment.").completer = list_services
    copyservice_parser.add_argument("destinationService", help='Service to copy properties to. By default the destination is assumed to be in the current environment. Specify "<destinationEnvironment>:" as a prefix on destinationService to copy the properties to a different environment.')
    copyservice_parser.add_argument("-c", "--create", help='Creates the destination service if it does not exist.', action='store_true')
    copyservice_parser.add_argument("-e", "--environment", help='Destination environment. With no environment switch, the currently set environment is assumed.')

variables = read_variables()

setup_parsers()
argcomplete.autocomplete(parser)
argsNamespace = parser.parse_args()
args = vars(argsNamespace)

if len(sys.argv) > 1:
    command = sys.argv[1]
    if command == 'environment':
        if get_environment():
            print get_environment()
        else:
            print ""
    elif command == 'setenvironment':
        set_environment(args['environment'])
    elif command == "setdomain":
        set_domain(args['domain'])
    else:
        if not get_environment():
            print("Environment is not set. Call 'setenvironment' first")
        else:
            if command == 'instances':
                print_instances(' '.join(args['filter']).decode() if ('filter' in args) else None)
            elif command == 'services':
                print_services()
            elif command == 'copyservice':
                copy_service(args)
            elif command == 'properties':
                print_properties(args['service'], args['json'])
            elif command == 'ssh':
                ssh(args)
            elif command == 'setproperties':
                if args['file'] is None and len(args['properties']) < 1:
                    print "You must specify properties or -f with a property file"
                else:
                    password = getpass.getpass()
                    set_properties(args, getpass.getuser(), password)

